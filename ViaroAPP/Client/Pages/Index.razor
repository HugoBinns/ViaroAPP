@page "/"
@inject NotificationService NotificationService
@inject HttpClient Http
@inject IJSRuntime JSRuntime

@using ViaroAPP.Shared
@using Radzen
@using Radzen.Blazor

<PageTitle>Viaro app</PageTitle>
<h2>Alumnos</h2>
<RadzenRow>
    <RadzenDataGrid @ref="GridAlumno" TItem="Alumno" AllowFiltering="true" AllowColumnResize="true" AllowPaging="true" PageSize="3" AllowSorting="true" Data="@alumno" RowUpdate="@OnUpdateRow" ColumnWidth="200px" SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selected_alumno EditMode="@editMode">
        <HeaderTemplate>
            <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="Nuevo Alumno" Click="@InsertRow"/>
        </HeaderTemplate>
        <Columns>
            <RadzenDataGridColumn Property="@nameof(Alumno.id)" Filterable="true" Title="ID" Width="80px" Frozen="true"/>
            <RadzenDataGridColumn Property="@nameof(Alumno.nombre)" Filterable="true" Title="Nombre" Width="280px">
                <EditTemplate Context="alumno">
                    <RadzenTextBox @bind-Value="alumno.nombre" Style="width:280px;display:block" Name="Nombre"/>
                    <RadzenRequiredValidator Text="Nombre en blanco" Component="Nombre" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(Alumno.apellidos)" Filterable="true" Title="Apellidos" Width="300px">
                <EditTemplate Context="alumno">
                    <RadzenTextBox @bind-Value="alumno.apellidos" Style="width:300px;display:block" Name="Apellidos"/>
                    <RadzenRequiredValidator Text="Apellidos en blanco" Component="Apellidos" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(Alumno.Genero)" Filterable="true" Title="Género" Width="110px">
                <EditTemplate Context="alumno">
                    <RadzenTextBox @bind-Value="alumno.Genero" Style="width:110px;display:block" Name="Genero"/>
                    <RadzenRequiredValidator Text="Género en blanco" Component="Genero" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(Alumno.fecha_nacimiento)" Filterable="true" Title="Fecha de Nacimiento" Width="230px">
                <Template Context="alumno">
                    @String.Format("{0:d}", alumno.fecha_nacimiento)
                </Template>
                <EditTemplate Context="alumno">
                    <RadzenDatePicker @bind-Value="alumno.fecha_nacimiento" Style="width:100%" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select la fecha de nacimiento" }})"></RadzenDatePicker>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Context="alumno" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right" Width="80px"> 
                <Template Context="alumno">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => EditRow(alumno))" @onclick:stopPropagation="true"></RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => EliminarAlumno(alumno))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="alumno">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" aria-label="Guardar" Click="@((args) => SaveRow(alumno))">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" aria-label="Cancelar" Click="@((args) => CancelEdit(alumno))">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" aria-label="Delete" Click="@(args => EliminarAlumno(alumno))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</RadzenRow>
<br />
<h2>Profesores</h2>
<RadzenRow>
    <RadzenDataGrid @ref="GridProfesor" TItem="Profesor" AllowFiltering="true" AllowColumnResize="true" AllowPaging="true" PageSize="3" AllowSorting="true" Data="@profesor" RowUpdate="@OnUpdateRow" ColumnWidth="200px" SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selected_profesor EditMode="@editMode">
        <HeaderTemplate>
            <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="Nuevo Profesor" Click="@InsertRowProfesor" />
        </HeaderTemplate>
        <Columns>
            <RadzenDataGridColumn Property="@nameof(Profesor.id)" Filterable="true" Title="ID" Width="80px" Frozen="true" />
            <RadzenDataGridColumn Property="@nameof(Profesor.nombre)" Filterable="true" Title="Nombre" Width="280px">
                <EditTemplate Context="profesor">
                    <RadzenTextBox @bind-Value="profesor.nombre" Style="width:280px;display:block" Name="Nombre" />
                    <RadzenRequiredValidator Text="Nombre en blanco" Component="Nombre" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(Profesor.apellidos)" Filterable="true" Title="Apellidos" Width="300px">
                <EditTemplate Context="profesor">
                    <RadzenTextBox @bind-Value="profesor.apellidos" Style="width:300px;display:block" Name="Apellidos" />
                    <RadzenRequiredValidator Text="Apellidos en blanco" Component="Apellidos" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(Profesor.genero)" Filterable="true" Title="Género" Width="110px">
                <EditTemplate Context="profesor">
                    <RadzenTextBox @bind-Value="profesor.genero" Style="width:110px;display:block" Name="Genero" />
                    <RadzenRequiredValidator Text="Género en blanco" Component="Genero" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Context="profesor" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right" Width="80px">
                <Template Context="profesor">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => EditRowProfe(profesor))" @onclick:stopPropagation="true"></RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => EliminarProfesor(profesor))" @onclick:stopPropagation="true"></RadzenButton>
                </Template>
                <EditTemplate Context="profesor">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" aria-label="Guardar" Click="@((args) => SaveRow(profesor))">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" aria-label="Cancelar" Click="@((args) => CancelEdit(profesor))">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" aria-label="Delete" Click="@(args => EliminarProfesor(profesor))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>

        </Columns>
    </RadzenDataGrid>
</RadzenRow>


@code {
    public RadzenDataGrid<Alumno> GridAlumno;
    public List<Alumno> alumno = new List<Alumno>();
    public IList<Alumno> selected_alumno;

    public RadzenDataGrid<Profesor> GridProfesor;
    public List<Profesor> profesor = new List<Profesor>();
    public IList<Profesor> selected_profesor;

    DataGridEditMode editMode =  DataGridEditMode.Single;

    //Funcion Principal
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var responseAlumno = await Http.GetFromJsonAsync<List<Alumno>>("api/Alumno");
            alumno = responseAlumno.ToList();

            var responseProfesor = await Http.GetFromJsonAsync<List<Profesor>>("api/Profesor");
            profesor = responseProfesor.ToList();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", ex.Message);
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }


    //------------------------------------------------------------------------------Funciones del Alummno--------------------------------------------------------------------------------------
    //Evento OnUpDate del Grid
    public async void OnUpdateRow(Alumno alumnos)
    {
        await EditarAlumnos(alumnos);
    }

    //Este es el evento Edit
    public async Task EditRow(Alumno alumno)
    {
        await GridAlumno.EditRow(alumno);
    }

    //FuncionPara Guardar los cambios de la fila
    public async Task SaveRow(Alumno alumnos)
    {
        try
        {
            await GridAlumno.UpdateRow(alumnos);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    //Funcion para cancelar la edicion
    public async void CancelEdit(Alumno alumnos)
    {
        GridAlumno.CancelEditRow(alumnos);
        await RefreshAlumno();

    }

    //Funcion Para insertar un alumno
    public async Task InsertRow()
    {
        try
        {
            var id = await JSRuntime.InvokeAsync<string>("prompt", "Ingrese el ID");
            var nombre = await JSRuntime.InvokeAsync<string>("prompt", "Ingrese el Nombre");
            var apellidos = await JSRuntime.InvokeAsync<string>("prompt", "Ingrese los Apellidos");
            var genero = await JSRuntime.InvokeAsync<string>("prompt", "Ingrese el Género");
            var fecnac = await JSRuntime.InvokeAsync<string>("prompt", "Ingrese la fecha de nacimiento");

            var alumnoAux = new Alumno { id = id.ToUpper(), nombre = nombre, apellidos = apellidos, Genero = genero.ToUpper(), fecha_nacimiento = DateTime.Parse(fecnac) };

            await InsertAlumno(alumnoAux);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", ex.Message);
        }
    }

    //Insertar Alumno
    public async Task InsertAlumno(Alumno alumnos)
    {
        try
        {
            if (alumno.Contains(new Alumno { id = alumnos.id }))
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Ya existe un alumno con el ID: {alumnos.id}");
            }
            else
            {
                var responseInsertAlumno = await Http.PutAsJsonAsync("api/Alumno/insert_alumno", alumnos);
                if (responseInsertAlumno.IsSuccessStatusCode)
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"Se ha ingresado al alumno {alumnos.nombre} {alumnos.apellidos}, con ID {alumnos.id}");
                }
                else
                {
                    var InsertResponse = await responseInsertAlumno.Content.ReadAsStringAsync();
                    throw new Exception(InsertResponse);
                }
            }
        }
        catch(Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al insertar al alumno {ex.Message}");
        }
        finally
        {
            await RefreshAlumno();
            await InvokeAsync(StateHasChanged);
        }
    }

    //Funcion para editar alumnos
    public async Task EditarAlumnos(Alumno alumno)
    {
        try
        {
            var responseUpdateAlumno = await Http.PutAsJsonAsync("api/Alumno/update_alumno", alumno);
            if (responseUpdateAlumno.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Se ha actualizado al alumno {alumno.id}, {alumno.nombre}");
            }
            else
            {
                var UpdateResponse = await responseUpdateAlumno.Content.ReadAsStringAsync();
                throw new Exception(UpdateResponse);
            }
        }
        catch(Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al actualizar {alumno.id}. {ex.Message}");
        }
        finally
        {
            await RefreshAlumno();
            await InvokeAsync(StateHasChanged);
        }
    }

    //Funcion para eliminar alumnos
    public async Task EliminarAlumno(Alumno alumno)
    {
        try
        {
            var responseDeleteAlumno = await Http.PutAsJsonAsync("api/Alumno/delete_alumno", alumno);
            if (responseDeleteAlumno.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Se ha eliminado al alumno {alumno.nombre} {alumno.apellidos}, con ID: {alumno.id}");
            }
            else
            {
                var DeleteResponse = await responseDeleteAlumno.Content.ReadAsStringAsync();
                throw new Exception(DeleteResponse);
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al eliminar al alumno {alumno.id}. {ex.Message}");
        }
        finally
        {
            await RefreshAlumno();
            await InvokeAsync(StateHasChanged);
        }
    }


    //RefreshAlumno
    public async Task RefreshAlumno()
    {
        try
        {
            var responseAlumno = await Http.GetFromJsonAsync<List<Alumno>>("api/Alumno");
            alumno = responseAlumno.ToList();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", ex.Message);
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }



    //------------------------------------------------------------------------------Funciones del Profesor--------------------------------------------------------------------------------------\

    //Evento OnUpDate del Grid
    public async void OnUpdateRow(Profesor profesors)
    {
        await EditarProfesors(profesors);
    }

    //Este es el evento Edit
    public async Task EditRowProfe(Profesor profesor)
    {
        await GridProfesor.EditRow(profesor);
    }

    //FuncionPara Guardar los cambios de la fila
    public async Task SaveRow(Profesor profesors)
    {
        try
        {
            await GridProfesor.UpdateRow(profesors);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    //Funcion para cancelar la edicion
    public async void CancelEdit(Profesor profesors)
    {
        GridProfesor.CancelEditRow(profesors);
        await RefreshProfesor();
    }

    //Funcion Para insertar un profesor
    public async Task InsertRowProfesor()
    {
        try
        {
            var id = await JSRuntime.InvokeAsync<string>("prompt", "Ingrese el ID");
            var nombre = await JSRuntime.InvokeAsync<string>("prompt", "Ingrese el Nombre");
            var apellidos = await JSRuntime.InvokeAsync<string>("prompt", "Ingrese los Apellidos");
            var genero = await JSRuntime.InvokeAsync<string>("prompt", "Ingrese el Género");

            var profesorAux = new Profesor { id = id.ToUpper(), nombre = nombre, apellidos = apellidos, genero = genero.ToUpper() };

            await InsertProfesor(profesorAux);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", ex.Message);
        }
    }

    //Insertar Profesor
    public async Task InsertProfesor(Profesor profesors)
    {
        try
        {
            if (profesor.Contains(new Profesor { id = profesors.id }))
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Ya existe un profesor con el ID: {profesors.id}");
            }
            else
            {
                var responseInsertProfesor = await Http.PutAsJsonAsync("api/Profesor/insert_profesor", profesors);
                if (responseInsertProfesor.IsSuccessStatusCode)
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"Se ha ingresado al profesor {profesors.nombre} {profesors.apellidos}, con ID {profesors.id}");
                }
                else
                {
                    var InsertResponse = await responseInsertProfesor.Content.ReadAsStringAsync();
                    throw new Exception(InsertResponse);
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al insertar al profesor {ex.Message}");
        }
        finally
        {
            await RefreshProfesor();
            await InvokeAsync(StateHasChanged);
        }
    }

    //Funcion para editar profesors
    public async Task EditarProfesors(Profesor profesor)
    {
        try
        {
            var responseUpdateProfesor = await Http.PutAsJsonAsync("api/Profesor/update_profesor", profesor);
            if (responseUpdateProfesor.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Se ha actualizado al profesor {profesor.id}, {profesor.nombre}");
            }
            else
            {
                var UpdateResponse = await responseUpdateProfesor.Content.ReadAsStringAsync();
                throw new Exception(UpdateResponse);
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al actualizar {profesor.id}. {ex.Message}");
        }
        finally
        {
            await RefreshProfesor();
            await InvokeAsync(StateHasChanged);
        }
    }

    //Funcion para eliminar profesors
    public async Task EliminarProfesor(Profesor profesor)
    {
        try
        {
            var responseDeleteProfesor = await Http.PutAsJsonAsync("api/Profesor/delete_profesor", profesor);
            if (responseDeleteProfesor.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Se ha eliminado al profesor {profesor.nombre} {profesor.apellidos}, con ID: {profesor.id}");
            }
            else
            {
                var DeleteResponse = await responseDeleteProfesor.Content.ReadAsStringAsync();
                throw new Exception(DeleteResponse);
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al eliminar al profesor {profesor.id}. {ex.Message}");
        }
        finally
        {
            await RefreshProfesor();
            await InvokeAsync(StateHasChanged);
        }
    }


    //RefreshProfesor
    public async Task RefreshProfesor()
    {
        try
        {
            var responseProfesor = await Http.GetFromJsonAsync<List<Profesor>>("api/Profesor");
            profesor = responseProfesor.ToList();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", ex.Message);
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }








    //------------------------------------------------------------------------------Funciones Globales--------------------------------------------------------------------------------------
    public async Task Refresh()
    {
        try
        {
            var responseAlumno = await Http.GetFromJsonAsync<List<Alumno>>("api/Alumno");
            alumno = responseAlumno.ToList();

            var responseProfesor = await Http.GetFromJsonAsync<List<Profesor>>("api/Profesor");
            profesor = responseProfesor.ToList();

        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", ex.Message);
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    

}

